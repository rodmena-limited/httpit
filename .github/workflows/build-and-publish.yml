name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]  # macos-13 for x86_64
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build wheels
      run: python -m build --wheel

    - name: Store wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build sdist
      run: python -m build --sdist

    - name: Store sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  build_manylinux_wheels:
    name: Build manylinux wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['cp39', 'cp310', 'cp311', 'cp312', 'cp313']
        arch: ['x86_64', 'i686', 'aarch64']

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        CIBW_BUILD: ${{ matrix.python-version }}-manylinux_${{ matrix.arch }}
        CIBW_ARCHS: ${{ matrix.arch }}
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_MANYLINUX_I686_IMAGE: manylinux2014
        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        CIBW_ENVIRONMENT: >
          FASTHTTP_COMPILE_ARGS="-O3 -march=native -mtune=native"
        CIBW_BEFORE_BUILD: >
          pip install --upgrade pip setuptools wheel &&
          yum install -y gcc make
        CIBW_TEST_COMMAND: |
          python -c "import fasthttp; print('FastHTTP imported successfully')"
          python -c "from fasthttp import HTTPServer; print('HTTPServer available')"

    - name: Store manylinux wheels
      uses: actions/upload-artifact@v4
      with:
        name: manylinux-wheels-${{ matrix.python-version }}-${{ matrix.arch }}
        path: wheelhouse/*.whl

  test_wheels:
    name: Test wheels
    needs: [build_wheels, build_manylinux_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*wheels*'
        merge-multiple: true
        path: dist/

    - name: Install wheel
      run: |
        pip install --find-links dist/ fasthttp
        
    - name: Test import
      run: |
        python -c "import fasthttp; print('Import successful')"
        python -c "from fasthttp import HTTPServer; server = HTTPServer(port=8888); print('Server created')"
        
    - name: Test CLI
      run: |
        fasthttp --help || true

  publish:
    name: Publish to PyPI
    needs: [test_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: pypi
      url: https://pypi.org/p/fasthttp

    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true

    - name: List artifacts
      run: ls -la dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true

    - name: Test install from Test PyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ fasthttp
        python -c "import fasthttp; print('Test PyPI package works')"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

  create_release:
    name: Create GitHub Release
    needs: publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
